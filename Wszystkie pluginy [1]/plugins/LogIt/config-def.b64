[BF39267F-4D5E-4659-BC71-35DE1412FC5A]
path=locale
type=STRING
requires_restart=false
default_value=en
validator=
observer=io.github.lucaseasedup.logit.config.observers.LocaleObserver

[7A0409B1-A264-4E64-BB5D-475F29611568]
path=logging.file.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[2220EC36-31FC-4E64-95E6-38653153A236]
path=logging.file.filename
type=STRING
requires_restart=false
default_value=debug.log
validator=
observer=

[D327AE78-2706-4947-BB50-6E8047069C53]
path=logging.file.level
type=INT
requires_restart=false
default_value=0
validator=
observer=

[7EF13C70-E4A1-4356-AE25-A71391B47CC2]
path=logging.verbose-console
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[F53F2111-85DC-413F-BAF3-C863C3114214]
path=force-login.global
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[480FA917-48A2-4615-A730-FD6EEDD11CFA]
path=force-login.in-worlds
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[6A485F62-09C5-4EBA-8916-1CBD31A1A58C]
path=force-login.allowed-commands
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[9DD473E7-4970-45B0-91C3-441875992E6A]
path=force-login.timeout.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[F93A455F-F3AF-42DC-A112-F030385AADC6]
path=force-login.timeout.value
type=STRING
requires_restart=false
default_value=20sec
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=

[F6E12322-CECF-46D5-9EC3-F390BAC33310]
path=force-login.timeout.disable-for-players
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[90811A6D-71B6-4F63-9EEB-D688C34F1882]
path=force-login.prevent.move
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[87B72467-C05A-433A-969B-660CB908657C]
path=force-login.prevent.toggle-sneak
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[E5D6EB71-6A5A-4C6E-B65A-B179DA73085A]
path=force-login.prevent.block-place
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[BA65D12D-E91B-41D7-AA0D-6460745F23A3]
path=force-login.prevent.block-break
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[58396B84-177B-4AC1-A313-5F35E031DD7E]
path=force-login.prevent.damage-in
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[E6F25FE1-12DE-4057-90ED-27187DEC43BE]
path=force-login.prevent.damage-out
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[40078088-0100-4F73-B39F-943D4013C9E0]
path=force-login.prevent.regain-health
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[99D23292-E2CF-49BC-BEF2-C377EA736D2C]
path=force-login.prevent.food-level-change
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[28678060-1CEF-4496-84A3-6772FB651E59]
path=force-login.prevent.entity-target
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[68D82350-C46B-4D7F-9FBD-1A57F62AF800]
path=force-login.prevent.chat
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[D1607977-0EDB-4639-A993-18D99AD241CD]
path=force-login.prevent.command-preprocess
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[42B26620-FF94-428C-AA54-4327963AB75D]
path=force-login.prevent.pickup-item
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[150765B8-6712-4320-9855-4F2076A1BF76]
path=force-login.prevent.drop-item
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[C97B3421-A83D-4513-8C4A-DA7E68EBCD07]
path=force-login.prevent.interact
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[6D2E0651-2973-4D0B-9F94-7179134E8D78]
path=force-login.prevent.interact-entity
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[7F646116-08AB-4F38-BD16-34C5996B18DF]
path=force-login.prevent.inventory-click
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[A756F8FB-79E5-4472-AB44-DFC4B8D3C4D6]
path=force-login.prevent.air-depletion
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[616CB12B-86B4-4A84-809E-631688281292]
path=force-login.prompt.register
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[1FBA8181-F3BA-4CC4-B926-5E45ECF78E31]
path=force-login.prompt.login
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[D4B5D911-5255-446A-8493-62BFD18BD93F]
path=force-login.prompt.min-interval
type=STRING
requires_restart=false
default_value=2sec
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=

[1DD35066-CC25-4C4B-AD0C-F641CDEAF72B]
path=force-login.periodical-prompt.enabled
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[E11A1CD1-8585-4935-99DF-FD714CD94DE6]
path=force-login.periodical-prompt.period
type=STRING
requires_restart=false
default_value=10sec
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=

[21A86D13-3035-4192-B880-01D2FC0B00F9]
path=force-login.prompt-on.join
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[0A345D51-FAEF-440B-9294-178CF22C1CF6]
path=force-login.prompt-on.drop-item
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[57B3DBC4-CEB4-46A6-B784-01058BB63915]
path=force-login.prompt-on.block-place
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[CCCDB4D2-EE72-4929-A518-07B9AFA6E035]
path=force-login.prompt-on.block-break
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[D1C21C90-565D-4696-AE2A-E83DFBD744C6]
path=force-login.prompt-on.interact
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[FF837BD9-F587-4ED9-A170-921C9F7183E5]
path=force-login.prompt-on.interact-entity
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[D3E66F33-5B1C-4FEB-8797-B1F132676978]
path=force-login.obfuscate-bars.air
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=io.github.lucaseasedup.logit.config.observers.SerializerObserver

[2D362AB7-DB9F-480F-AAD4-758AD3A5F200]
path=force-login.obfuscate-bars.health
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=io.github.lucaseasedup.logit.config.observers.SerializerObserver

[BDB83D02-D4A1-45C4-BF5B-9A42FE2CCABF]
path=force-login.obfuscate-bars.experience
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=io.github.lucaseasedup.logit.config.observers.SerializerObserver

[24D0DBD4-7EA7-45AE-A99E-AD52C771D599]
path=force-login.obfuscate-bars.hunger
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=io.github.lucaseasedup.logit.config.observers.SerializerObserver

[70B082DF-5598-45DF-B85E-CE76E68D9DFC]
path=force-login.exempt-players
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[DBA80D75-1FFA-4414-A98F-4E9796048535]
path=login-sessions.enabled
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[CC77C91B-9164-498B-9D63-699CE6A4D74C]
path=login-sessions.validness-time
type=STRING
requires_restart=false
default_value=7days
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=

[ED3E6058-C6BB-4A4C-A946-E3FB09B03956]
path=messages.join.hide
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[563A0385-3BC2-48FA-B2AB-D5531097F9B6]
path=messages.join.show-world
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[2A3EFA3F-A6D9-4EB7-8A1A-5C951D9B70A0]
path=messages.multiverse-hook
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[3F10AA19-B018-4482-BD1D-21A49C15580C]
path=messages.quit.hide
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[A1240312-4132-48E7-913B-3CD228834619]
path=username.regex
type=STRING
requires_restart=false
default_value=[A-Za-z0-9_]+
validator=
observer=

[9D40AE80-6877-406A-A74B-806DEEBDE8A0]
path=username.min-length
type=INT
requires_restart=false
default_value=2
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[513A448D-FB9D-4280-9B70-C5059CC5137D]
path=username.max-length
type=INT
requires_restart=false
default_value=16
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[3CEBA833-B085-4C45-9623-74FA96F0D7C0]
path=username.prohibited-usernames
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[8E16ABE6-1563-442C-A9AB-6250B4733284]
path=password.min-length
type=INT
requires_restart=false
default_value=4
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[EE88FCB0-08B3-4CB3-A5D5-345A62B607BE]
path=password.max-length
type=INT
requires_restart=false
default_value=40
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[781823AF-EFA3-4FD6-819B-04AD2B6D95BD]
path=password.hashing-algorithm
type=STRING
requires_restart=true
default_value=sha-256
validator=io.github.lucaseasedup.logit.config.validators.HashingAlgorithmValidator
observer=

[6C15E54B-6B19-4B37-B030-734CE2C6063C]
path=password.use-global-hashing-algorithm
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[3D7B3BC7-5C78-4B5D-B46E-E4A0201F1A27]
path=password.use-salt
type=BOOLEAN
requires_restart=true
default_value=true
validator=
observer=

[35ADCE44-6412-4890-9686-DFECAEFED060]
path=password.global-password.hash
type=STRING
requires_restart=false
default_value=
validator=
observer=

[78A1FAD7-2E15-4E12-ABEF-58D8745B6ECD]
path=password.global-password.salt
type=STRING
requires_restart=false
default_value=
validator=
observer=

[DFCD6CB7-639A-4AFF-BE44-EE6EC89E52FD]
path=password.disable-passwords
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[2524F0D5-2231-4C0C-A58C-40DDA28F1AF5]
path=crowd-control.login-fails-to-kick
type=INT
requires_restart=false
default_value=-1
validator=
observer=

[8DA0D5E8-EC9A-4179-8633-A09240E1EBA1]
path=crowd-control.login-fails-to-ban
type=INT
requires_restart=false
default_value=-1
validator=
observer=

[6BCB4AF6-A9EE-4AA5-8ACA-B9830C52D047]
path=crowd-control.kick-unregistered
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[4102D52F-CF84-4961-A22C-F06072EDFCE9]
path=crowd-control.automatic-account-deletion.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[548807F2-7C03-403D-BFFF-5DCAD2A7CBA8]
path=crowd-control.automatic-account-deletion.inactivity-time
type=STRING
requires_restart=false
default_value=365days
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=

[2240FE69-39C8-484E-8A83-D86DD59E3832]
path=crowd-control.accounts-per-ip.amount
type=INT
requires_restart=false
default_value=-1
validator=
observer=

[804AFC90-59DB-4798-B23D-748E14C3D8FD]
path=crowd-control.accounts-per-ip.unrestricted-ips
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[1CF2C603-1924-4EBE-8B00-316A4E4E0F7D]
path=crowd-control.reserve-slots.amount
type=INT
requires_restart=false
default_value=0
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[DDF0E2A0-7D43-42D7-9D14-816873C77AD7]
path=crowd-control.reserve-slots.for-players
type=STRING_LIST
requires_restart=false
default_value=
validator=
observer=

[28FE7675-1365-4E13-862F-A5BFDEC635B4]
path=password-recovery.enabled
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[C3C5E6BD-A1F4-4BFA-AF42-EA64583D982E]
path=password-recovery.subject
type=STRING
requires_restart=false
default_value=Password recovery for %player%
validator=
observer=

[26236E63-60FA-454C-8894-1A3A0A918C26]
path=password-recovery.body-template
type=STRING
requires_restart=false
default_value=mail/password-recovery.html
validator=
observer=

[A0577CDB-7B00-45AA-A827-948C92401128]
path=password-recovery.html-enabled
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[19AF8FC5-D51F-489E-A3BE-46DC86143F6B]
path=password-recovery.password-length
type=INT
requires_restart=false
default_value=6
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=

[ABB5BB27-FB4B-42E1-9F16-9A3B13A838F9]
path=password-recovery.password-combination
type=STRING
requires_restart=false
default_value=abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
validator=
observer=

[D3D429E2-36AD-4623-8DBE-EE4E946469AE]
path=password-recovery.prompt-to-add-email
type=BOOLEAN
requires_restart=false
default_value=true
validator=
observer=

[B370BF8E-3C4A-43CB-86A1-429307EAC166]
path=mail.email-address
type=STRING
requires_restart=false
default_value=
validator=
observer=

[FBBBC7DE-B817-4E8D-9E4D-9CC47D4D72C9]
path=mail.smtp-host
type=STRING
requires_restart=false
default_value=
validator=
observer=io.github.lucaseasedup.logit.config.observers.SmtpObserver

[8D48B6C3-2E21-4FB3-89DF-6D303F0B6A88]
path=mail.smtp-port
type=INT
requires_restart=false
default_value=465
validator=io.github.lucaseasedup.logit.config.validators.NonNegativeValidator
observer=io.github.lucaseasedup.logit.config.observers.SmtpObserver

[E0BCECB8-2397-4BDF-B8F8-6DA42AD8C607]
path=mail.smtp-user
type=STRING
requires_restart=false
default_value=
validator=
observer=io.github.lucaseasedup.logit.config.observers.SmtpObserver

[086405C2-4A4B-443E-8268-B9EAC3B5B5FD]
path=mail.smtp-password
type=STRING
requires_restart=false
default_value=
validator=
observer=io.github.lucaseasedup.logit.config.observers.SmtpObserver

[6B36E475-9CCA-4F77-814E-45AF5958ABE3]
path=waiting-room.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=io.github.lucaseasedup.logit.config.observers.SerializerObserver

[9903377E-14BE-46B0-8380-D9F46565A769]
path=waiting-room.location
type=LOCATION
requires_restart=false
default_value=
validator=
observer=

[F88EE250-ACAD-4A36-AE77-58D534DFFE27]
path=waiting-room.newbie-teleport.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[5FA7EDF5-A9D7-4742-978B-DBFFCE883F04]
path=waiting-room.newbie-teleport.location
type=LOCATION
requires_restart=false
default_value=
validator=
observer=

[28E85F37-8A59-4C0C-BFB5-7003B51E275C]
path=groups.enabled
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[643F2FFD-84D6-490D-9D8F-7D8C0A34E5B5]
path=groups.registered
type=STRING
requires_restart=true
default_value=Registered
validator=
observer=

[F77552F8-D7A5-4106-8F44-AFEA6B710948]
path=groups.unregistered
type=STRING
requires_restart=true
default_value=Unregistered
validator=
observer=

[7F2A671A-715E-4E7B-AFC6-BAC89F988AA3]
path=groups.logged-in
type=STRING
requires_restart=true
default_value=LoggedIn
validator=
observer=

[A1DAD663-68CA-4261-88D9-6EC3073CA5B2]
path=groups.logged-out
type=STRING
requires_restart=true
default_value=LoggedOut
validator=
observer=

[B5098F05-4C3B-4048-B01E-957CA39448B4]
path=integration
type=STRING
requires_restart=true
default_value=none
validator=io.github.lucaseasedup.logit.config.validators.IntegrationValidator
observer=

[C60936B9-51E0-4E39-A853-7319BB139970]
path=profiles.enabled
type=BOOLEAN
requires_restart=true
default_value=false
validator=
observer=

[8CF2368E-3573-4463-AFC6-68C47B4A8BC4]
path=profiles.path
type=STRING
requires_restart=true
default_value=profiles
validator=
observer=

[85C3C6EC-35CE-442B-8429-E90C24EBE9F8]
path=storage.accounts.leading.storage-type
type=STRING
requires_restart=true
default_value=sqlite
validator=io.github.lucaseasedup.logit.config.validators.DbTypeValidator
observer=

[8D5646CA-08EE-43BA-9CED-1B855519D94B]
path=storage.accounts.leading.csv.dir
type=STRING
requires_restart=true
default_value=./
validator=
observer=

[4C8792EB-FD01-4F6C-8873-D79A2AB3C7D5]
path=storage.accounts.leading.sqlite.filename
type=STRING
requires_restart=true
default_value=accounts.db
validator=
observer=

[88069D16-8FA7-4BF1-9193-2262EE4ACDFB]
path=storage.accounts.leading.h2.filename
type=STRING
requires_restart=true
default_value=accounts
validator=
observer=

[7AA650BD-8CA9-45F0-8525-A96F474FF3F0]
path=storage.accounts.leading.mysql.host
type=STRING
requires_restart=true
default_value=jdbc:mysql://localhost:3306/
validator=
observer=

[18F9FF7F-3D77-4B2C-A953-6B160377E8E1]
path=storage.accounts.leading.mysql.user
type=STRING
requires_restart=true
default_value=root
validator=
observer=

[E94A8612-03E7-40AD-BE5B-1EDF42853015]
path=storage.accounts.leading.mysql.password
type=STRING
requires_restart=true
default_value=
validator=
observer=

[425A7756-1435-4D11-825A-889703500480]
path=storage.accounts.leading.mysql.database
type=STRING
requires_restart=true
default_value=
validator=
observer=

[49EE6C8D-5055-4742-98C3-BAF9D5B3B190]
path=storage.accounts.leading.postgresql.host
type=STRING
requires_restart=true
default_value=jdbc:postgresql://localhost:5432/database
validator=
observer=

[908AAF8B-F21A-4D00-A8E1-1F83BC22C147]
path=storage.accounts.leading.postgresql.user
type=STRING
requires_restart=true
default_value=postgres
validator=
observer=

[1AD10936-DC8C-4E2E-83D8-A878BF650D88]
path=storage.accounts.leading.postgresql.password
type=STRING
requires_restart=true
default_value=
validator=
observer=

[473142B0-B917-48DF-B6EA-B5D9249B68FB]
path=storage.accounts.leading.unit
type=STRING
requires_restart=true
default_value=logit
validator=
observer=

[98B34FCB-D0CE-4C9A-A1BB-9434E0B3C482]
path=storage.accounts.leading.cache
type=STRING
requires_restart=true
default_value=disabled
validator=io.github.lucaseasedup.logit.config.validators.CacheTypeValidator
observer=

[E03DED6A-1052-4268-A447-7920DA982F25]
path=storage.accounts.mirror.storage-type
type=STRING
requires_restart=true
default_value=none
validator=io.github.lucaseasedup.logit.config.validators.DbTypeValidator
observer=

[EE9129DE-2054-4A7A-9FD0-BEE0A80B7F97]
path=storage.accounts.mirror.csv.dir
type=STRING
requires_restart=true
default_value=./
validator=
observer=

[396B0989-057F-484A-BB9B-7CC14F24F8FE]
path=storage.accounts.mirror.sqlite.filename
type=STRING
requires_restart=true
default_value=accounts2.db
validator=
observer=

[460E3012-1314-4A6D-8FA0-FF6D840821CD]
path=storage.accounts.mirror.h2.filename
type=STRING
requires_restart=true
default_value=accounts2
validator=
observer=

[F913D286-C8C0-4074-B8B4-072E305AEC4A]
path=storage.accounts.mirror.mysql.host
type=STRING
requires_restart=true
default_value=jdbc:mysql://localhost:3306/
validator=
observer=

[1F636E10-0E65-4A9A-B734-314FD9559287]
path=storage.accounts.mirror.mysql.user
type=STRING
requires_restart=true
default_value=root
validator=
observer=

[A5BF4E10-BE5E-47E6-A721-FBB309537814]
path=storage.accounts.mirror.mysql.password
type=STRING
requires_restart=true
default_value=
validator=
observer=

[0636520A-183A-4874-B86E-251D94A4E139]
path=storage.accounts.mirror.mysql.database
type=STRING
requires_restart=true
default_value=
validator=
observer=

[8311978D-19E7-4343-BF31-52E964229387]
path=storage.accounts.mirror.postgresql.host
type=STRING
requires_restart=true
default_value=jdbc:postgresql://localhost:5432/database
validator=
observer=

[BBF5AB86-1462-4014-8705-29C2F47FCC32]
path=storage.accounts.mirror.postgresql.user
type=STRING
requires_restart=true
default_value=postgres
validator=
observer=

[B9293A95-4C3E-459D-9310-70140296E1A2]
path=storage.accounts.mirror.postgresql.password
type=STRING
requires_restart=true
default_value=
validator=
observer=

[D8C5D1FD-4BF6-46E0-ADB3-D441A3F18B7B]
path=storage.accounts.mirror.unit
type=STRING
requires_restart=true
default_value=logit2
validator=
observer=

[556E8F80-A068-4B45-B785-3846D73FFE24]
path=storage.accounts.keys.username
type=STRING
requires_restart=true
default_value=username
validator=
observer=

[7E844FE4-94BF-4E17-943B-B0B45974CE2F]
path=storage.accounts.keys.salt
type=STRING
requires_restart=true
default_value=salt
validator=
observer=

[5DDB472E-D16B-40FA-8993-A4A4D042A3B1]
path=storage.accounts.keys.password
type=STRING
requires_restart=true
default_value=password
validator=
observer=

[0691ED06-662F-4D74-A684-00CCBA6EF74D]
path=storage.accounts.keys.hashing_algorithm
type=STRING
requires_restart=true
default_value=hashing_algorithm
validator=
observer=

[788B9EAB-E3E9-4974-98E4-32F6F1C2F6DE]
path=storage.accounts.keys.ip
type=STRING
requires_restart=true
default_value=ip
validator=
observer=

[0C843A92-C28C-4142-86CC-DB327A4E01EB]
path=storage.accounts.keys.login_session
type=STRING
requires_restart=true
default_value=login_session
validator=
observer=

[9458AA59-90E3-4ED7-922D-4926FA3BABC6]
path=storage.accounts.keys.email
type=STRING
requires_restart=true
default_value=email
validator=
observer=

[4D7E23CC-9859-424B-BC11-62BA8F41A757]
path=storage.accounts.keys.last_active_date
type=STRING
requires_restart=true
default_value=last_active_date
validator=
observer=

[18921EE9-E0E1-474D-A6C3-851849798EE2]
path=storage.accounts.keys.reg_date
type=STRING
requires_restart=true
default_value=reg_date
validator=
observer=

[C5E8CBA4-AF33-4A29-AF2B-E0EA92AECF38]
path=storage.accounts.keys.is_locked
type=STRING
requires_restart=true
default_value=is_locked
validator=
observer=

[49E4D07F-5159-4B40-A28C-20761148801D]
path=storage.accounts.keys.persistence
type=STRING
requires_restart=true
default_value=persistence
validator=
observer=

[77CE788D-FCB8-4C07-9ADE-E8718263DE59]
path=storage.sessions.filename
type=STRING
requires_restart=false
default_value=sessions.db
validator=
observer=

[839D5378-ED63-4EC2-8ACD-20546DD7E449]
path=backup.path
type=STRING
requires_restart=false
default_value=backup
validator=
observer=

[69B76CAC-B60B-4905-851B-63056C0EC8B1]
path=backup.filename-format
type=STRING
requires_restart=false
default_value=yyyy-MM-dd_HH-mm-ss'.db'
validator=
observer=

[242D0670-1E4C-44A4-87A2-9AC1154EE5D6]
path=backup.schedule.enabled
type=BOOLEAN
requires_restart=false
default_value=false
validator=
observer=

[F204DAC4-9DA7-495B-A43E-518B554794F9]
path=backup.schedule.interval
type=STRING
requires_restart=false
default_value=120min
validator=io.github.lucaseasedup.logit.config.validators.TimeStringValidator
observer=
